/*
** Generated by WorkShop Visual
*/
/*
**LIBS: -lXm -lXt -lX11
*/

#include <stdlib.h>
#include <fstream.h>
#include <X11/Xatom.h>
#include <X11/Intrinsic.h>
#include <X11/Shell.h>
#include <X11/Intrinsic.h>
#include <Xm/RepType.h>
#include <Xm/Protocols.h>

#include <Xm/Xm.h>
#include <Xm/DialogS.h>
#include <Xm/Form.h>
#include <Xm/Label.h>
#include <Xm/List.h>
#include <Xm/PushB.h>
#include <Xm/ScrollBar.h>
#include <Xm/Separator.h>


#include <stdio.h>
#include <mysql.h>
#include <vector>
#include <iostream.h>
#include "dragon.h"
#include "graphwindow.h"


bool DatabaseOpen = false;
MYSQL_RES *result;
MYSQL_ROW row;
MYSQL *connection,mysql;
char selected_proc[100];

Widget InterRegionShell = (Widget) NULL;
Widget InterRegionForm = (Widget) NULL;
Widget list1 = (Widget)NULL;
Widget list2 = (Widget)NULL;
Widget list3 = (Widget)NULL;
Widget list4 = (Widget)NULL;
Widget list5 = (Widget)NULL;

 


void CloseRegions(Widget CloseButtonWidget, XtPointer, XtPointer)
{

  //	XmGraphDestroyAllArcs(Callgraph);
   UnHighlightText();
   Regionswindowopen = False;
   // ProcedureLoaded = rootnode;
   XtUnmanageChild(InterRegionShell);
   // mysql_close(connection);
   DatabaseOpen = false;
}

void ProcedureCallback(Widget CloseButtonWidget, XtPointer, XtPointer);
void ArrayNameCallback(Widget CloseButtonWidget, XtPointer, XtPointer);


void create_InterRegionShell (Widget parent)
{
	Widget children[14];      /* Children to manage */
	Arg al[64];                    /* Arg List */
	register int ac = 0;           /* Arg Count */
	XtPointer tmp_value;             /* ditto */
	Widget separator1 = (Widget)NULL;
	Widget label1 = (Widget)NULL;
	Widget separator2 = (Widget)NULL;
	Widget label2 = (Widget)NULL;
	Widget label3 = (Widget)NULL;
	Widget label4 = (Widget)NULL;
	Widget label5 = (Widget)NULL;
	Widget label6 = (Widget)NULL;
	Widget scrolledList1 = (Widget)NULL;
	Widget scrolledList2 = (Widget)NULL;
	Widget scrolledList3 = (Widget)NULL;
	Widget scrolledList4 = (Widget)NULL;
        Widget scrolledList5 = (Widget)NULL; 
	Widget button2 = (Widget)NULL;

       
        XtSetArg(al[ac], XmNallowShellResize, FALSE); ac++;
	XtSetArg(al[ac], XmNtitle, "Interprocedural Array Regions Analysis"); ac++;
        XtSetArg(al[ac], XmNheight, 300); ac++;
        XtSetArg(al[ac], XmNwidth,600); ac++;
       
	InterRegionShell = XtCreatePopupShell ( (char *) "InterRegionShell", topLevelShellWidgetClass, parent, al, ac );

        Atom WmDeleteWindow = XmInternAtom(XtDisplay(InterRegionShell),"WM_DELETE_WINDOW",False);
        XmAddWMProtocolCallback(InterRegionShell, WmDeleteWindow, CloseRegions, NULL); 



	ac = 0;
	XtSetArg(al[ac], XmNautoUnmanage, FALSE); ac++;
         XtSetArg(al[ac], XmNheight, 300); ac++;
        XtSetArg(al[ac], XmNwidth,600); ac++;
	InterRegionForm = XmCreateForm ( InterRegionShell, (char *) "InterRegionForm", al, ac );
	ac = 0;
	XtSetArg(al[ac], XmNseparatorType, XmSINGLE_DASHED_LINE); ac++;
	separator1 = XmCreateSeparator ( InterRegionForm, (char *) "separator1", al, ac );
	ac = 0;
	label1 = XmCreateLabel ( InterRegionForm, (char *) "label1", al, ac );
	separator2 = XmCreateSeparator ( InterRegionForm, (char *) "separator2", al, ac );
	label2 = XmCreateLabel ( InterRegionForm, (char *) "label2", al, ac );
	label3 = XmCreateLabel ( InterRegionForm, (char *) "label3", al, ac );
	label4 = XmCreateLabel ( InterRegionForm, (char *) "label4", al, ac );
	label5 = XmCreateLabel ( InterRegionForm, (char *) "label5", al, ac );
	label6 = XmCreateLabel ( InterRegionForm, (char *) "label6", al, ac );
	list1 = XmCreateScrolledList ( InterRegionForm, (char *) "list1", al, ac );
	scrolledList1 = XtParent ( list1 );
        ac = 0; 
	//XtSetArg(al[ac], XmNlistSizePolicy, XmRESIZE_IF_POSSIBLE); ac++;
	list2 = XmCreateScrolledList ( InterRegionForm, (char *) "list2", al, ac );
        scrolledList5 = XtParent ( list2 );
	ac = 0;


	list3 = XmCreateScrolledList ( InterRegionForm, (char *) "list3", al, ac );
	scrolledList2 = XtParent ( list3 );

	list4 = XmCreateScrolledList ( InterRegionForm, (char *) "list4", al, ac );
	scrolledList3 = XtParent ( list4 );

	list5 = XmCreateScrolledList ( InterRegionForm, (char *) "list5", al, ac );
	scrolledList4 = XtParent ( list5 );

	button2 = XmCreatePushButton ( InterRegionForm, (char *) "button2", al, ac );
        XtAddCallback( button2, XmNactivateCallback, CloseRegions, (XtPointer) 0 ); 

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 3); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( separator1,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, separator1); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( label1,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, label1); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( separator2,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, separator2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( label2,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, separator2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, label2); ac++;
	XtSetValues ( label3,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, separator2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, label3); ac++;
	XtSetValues ( label4,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, separator2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, label4); ac++;
	XtSetValues ( label5,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, separator2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, label5); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( label6,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNtopOffset, 44); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNbottomWidget, button2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
	XtSetArg(al[ac], XmNrightWidget, label2); ac++;
	XtSetValues ( scrolledList1,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, label3); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNbottomWidget, button2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, scrolledList1); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
	XtSetArg(al[ac], XmNrightWidget, label3); ac++;
	XtSetValues ( scrolledList5,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, label4); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNbottomWidget, button2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, scrolledList5); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
	XtSetArg(al[ac], XmNrightWidget, label4); ac++;
	XtSetValues ( scrolledList2,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, label5); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNbottomWidget, button2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, scrolledList2); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNrightWidget, label6); ac++;
	XtSetValues ( scrolledList3,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNtopWidget, label6); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNbottomWidget, button2); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_WIDGET); ac++;
	XtSetArg(al[ac], XmNleftWidget, scrolledList3); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_OPPOSITE_WIDGET); ac++;
	XtSetArg(al[ac], XmNrightWidget, label6); ac++;
	XtSetValues ( scrolledList4,al, ac );
	ac = 0;

	XtSetArg(al[ac], XmNtopAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
	XtSetArg(al[ac], XmNleftAttachment, XmATTACH_NONE); ac++;
	XtSetArg(al[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
	XtSetValues ( button2,al, ac );

        XtAddCallback(list1, XmNbrowseSelectionCallback, ProcedureCallback, (XtPointer) 0 );
        XtAddCallback(list2, XmNbrowseSelectionCallback, ArrayNameCallback, (XtPointer) 0 ); 
         
	ac = 0;
	if (list1 != (Widget) 0) { XtManageChild(list1); }
        if (list2 != (Widget) 0) { XtManageChild(list2); }
	if (list3 != (Widget) 0) { XtManageChild(list3); }
	if (list4 != (Widget) 0) { XtManageChild(list4); }
	if (list5 != (Widget) 0) { XtManageChild(list5); }
	if ((children[ac] = separator1) != (Widget) 0) { ac++; }
	if ((children[ac] = label1) != (Widget) 0) { ac++; }
	if ((children[ac] = separator2) != (Widget) 0) { ac++; }
	if ((children[ac] = label2) != (Widget) 0) { ac++; }
	if ((children[ac] = label3) != (Widget) 0) { ac++; }
	if ((children[ac] = label4) != (Widget) 0) { ac++; }
	if ((children[ac] = label5) != (Widget) 0) { ac++; }
	if ((children[ac] = label6) != (Widget) 0) { ac++; }
	if ((children[ac] = button2) != (Widget) 0) { ac++; }
	if (ac > 0) { XtManageChildren(children, ac); }
	ac = 0;
	if (InterRegionForm != (Widget) 0) { XtManageChild ( InterRegionForm); }
        if (InterRegionShell != (Widget) 0) { XtManageChild ( InterRegionShell); }

        CreateRegions();

        Regionswindowopen=true;
	
}

//-----------------------------
//DISPLAYS ELEMENTS IN THE GUI
//-----------------------------

void AddElement2List(char* addtext, Widget w)
{
    XmString xmstringt;
    xmstringt = XmStringCreateLtoR (addtext , (XmStringCharSet)XmFONTLIST_DEFAULT_TAG );
    XmListAddItem(w,xmstringt,0);
    XmStringFree(xmstringt);
  }
   
//---------------------------------------
//FUNCTION TO PRINT THE SQL QUERY RESULTS
//--------------------------------------- 
vector<string> Print_Query_Result(int num_fields, vector <string> proc_lst) 
{
     MYSQL_ROW row;
     int i, j=0;

     while ((row = mysql_fetch_row(result)) != NULL) 
     {
	 for(i = 0; i <num_fields; i++) 
	 {
	    proc_lst.push_back(row[i]);
	    j++;
	 }
	   
     }
     return proc_lst;
}


//-----------------------------------------------
//EVENT ON MOUSE CLICK ON A PROCEDURE/SCOPE NAME
//-----------------------------------------------
void ProcedureCallback(Widget w, XtPointer client_data, XtPointer call_data)
{

}

//--------------------------------------
//EVENT ON MOUSE CLICK ON AN ARRAY NAME
//--------------------------------------

void ArrayNameCallback(Widget w, XtPointer client_data, XtPointer call_data)
{
 
 
 
}

//------------------------------------------
//C API TO CONNECT TO THE MYSQL DATABASE
//-------------------------------------------

void Mysql_C_API(char *datafile, char *current_procedure_name) {

 }

//-------------------

void CreateRegions(void)
{
  /*****************************************/

bool rdebug = false;
  UIRegions.clear();
  /* Added to load regions */
  char *rfile1;
  char *rfile2; 
   
  int rlen = strlen(SelectedFile);
  rfile1 = new char[rlen+1+3];
  rfile2 = new char[rlen+1+3];
  strcpy(rfile1,SelectedFile);
  strcpy(rfile2,SelectedFile);
  rfile1[rlen-1] = '\0';
  rfile2[rlen-1] = '\0';
  strcat(rfile1,"rgn");
  // strcat(rfile2,"rgn2");

  if (rdebug) cout << endl << rfile1 <<endl <<rfile2<<endl;

  fstream rg1;
  fstream rg2;
   
  rg1.open(rfile1, ios::in);
  //rg2.open(rfile2, ios::in);

  if(!rg1.is_open())// || !rg2.is_open())
    {
      
      cout <<"Error: Could not open array regions files" <<endl;
      return;
    }
  
  char buffer[256];
  memset(buffer, 0 , 256);


  while (! rg1.eof() )
  {
    regions tmp; 
    for (int i=0; i<7; i++) {      
      rg1.getline(buffer,256,',');
	  
	   switch (i) {
           case 0: 
	   case 1:
           break;

           case 2:
	     if(strcmp(buffer,"@")==0)
               tmp.procname = "GLOBAL";  
             else
	       tmp.procname = buffer;
           break;
           case 3:
	       tmp.variablename = buffer;
	   break;
	   case 4:
	       tmp.usage = buffer;
	   break;
           case 5:
	     tmp.prstart = buffer;
             tmp.start = atoi(buffer);
	     break;
           case 6:
             tmp.prend = buffer;
             tmp.end = atoi(buffer);
             break;
                    
        }
    }
	   rg1.getline(buffer,256,'\n');
	   tmp.dimensions = buffer;
         if(rdebug)
	 cout << tmp.procname <<":"<<tmp.variablename<<":"<<tmp.usage<<":"
              << tmp.prstart<<":"<<tmp.prend<<":"<<tmp.dimensions << endl;
           
         UIRegions.push_back(tmp); 
      //if(rdebug)
      // cout << rbuffer << endl;
  }

  delete []rfile1;
  delete []rfile2;

 rg1.close();


 /*******************************/
        char *PU_Name, *FileName;
	int len=0,n;
        bool debug = false;
        XmListDeleteAllItems(list1);
        len=strlen(UICallgraphRoot[ProcedureLoaded].GetName());
	PU_Name = new char[len+1];
	strcpy(PU_Name, UICallgraphRoot[ProcedureLoaded].GetName());
        char temp[256]=" ";
        strcat(temp,PU_Name);
        
        for (int i=0; i< UIRegions.size()-1; i++)
	{   
	  if(strcmp(UIRegions[i].procname.c_str()," @")!=0 &&
	                   strcmp(UIRegions[i].usage.c_str()," PASSED")!=0 )
          {
            
            string tmp = UIRegions[i].procname;
            tmp+="::"; 
            tmp+=UIRegions[i].variablename;
            tmp+=", ";
            tmp+=UIRegions[i].usage;
            tmp+=", dimensions(";
            tmp+=UIRegions[i].dimensions;            
            tmp+="), references (";
	    int  num=  UIRegions[i].end -UIRegions[i].start+1;
            char temp_num[30];
            sprintf(temp_num, "%d",num);
	    tmp+=temp_num;
            tmp+=")"; 
            if (debug) cout << tmp << endl;  
             AddElement2List((char *)tmp.c_str(),list1);  
          }
            
            
        }
        


	if (debug)
	  {
	    cout << "\nProcedure Loaded:" <<PU_Name; 
            
          }
	// Mysql_C_API(FileName, PU_Name);
   

	delete [] PU_Name; 
}








