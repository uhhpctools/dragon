/* Prelude: *module*: header >>> */
/* <<< header ends. */
/*
** Generated by WorkShop Visual
*/

/*
** WorkShop Visual-generated prelude.
** Do not edit lines before "End of WorkShop Visual generated prelude"
** Lines beginning ** WorkShop Visual Stub indicate a stub
** which will not be output on re-generation
*/

/*
**LIBS: -lXm -lXt -lX11
*/

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<malloc.h>

#include <stdlib.h>
#include <X11/Xatom.h>
#include <X11/Intrinsic.h>
#include <X11/Shell.h>

#include <Xm/Xm.h>
#include <Xm/PushB.h>

#include "dragon.h"


extern void XDmanage_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDunmanage_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDpopup_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDpopdown_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDmap_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDunmap_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDenable_link( Widget w, XtPointer client_data, XtPointer call_data);
extern void XDdisable_link( Widget w, XtPointer client_data, XtPointer call_data);

/* End of WorkShop Visual generated prelude */
/*
** WorkShop Visual Stub ExitPrograph
*/

void ExitPrograph(Widget w, XtPointer client_data, XtPointer xt_call_data)
{
	XmPushButtonCallbackStruct *call_data = (XmPushButtonCallbackStruct *) xt_call_data ;
}

/*
** WorkShop Visual Stub OpenCallgraph
*/

/*
void OpenCallgraph(Widget w, XtPointer client_data, XtPointer xt_call_data)
{
	XmPushButtonCallbackStruct *call_data = (XmPushButtonCallbackStruct *) xt_call_data ;
}
*/
/*
** WorkShop Visual Stub OpenFlowgraph
*/
/*
void OpenFlowgraph(Widget w, XtPointer client_data, XtPointer xt_call_data)
{
	XmPushButtonCallbackStruct *call_data = (XmPushButtonCallbackStruct *) xt_call_data ;
}
*/
/*
** WorkShop Visual Stub OpenHelp
*/

void OpenHelp(Widget w, XtPointer client_data, XtPointer xt_call_data)
{
	XmPushButtonCallbackStruct *call_data = (XmPushButtonCallbackStruct *) xt_call_data ;
   char htmlFile[] = "http://www.cs.uh.edu/~dragon";
        FILE *f1;
        int i=0;

    //    char * cc;
        char *pathname= new char[200];/*the path of a html file*/
        char *net_path= new char[200];/*the path of netscape*/
	char *guide_path =new char[200]; /*the path of the user guide*/
/* first, we get the path of html file */
         char *dragon_dir=getenv(DRAGONPATH);
       if (dragon_dir)
       sprintf(guide_path,"%s/user_guide.pdf",dragon_dir);
       else
       printf("Cannot find the help file!\n");
       
	// cc=(char *)getcwd((char*) NULL, 100);
	// strcpy(pathname,cc);
	// strcat(pathname,"/help/");

        pathname[0]='\0'; 
        strcat(pathname, htmlFile);
        //printf("path=%s\n",pathname);
        if(strcmp(htmlFile,"")==0)
        {
                printf("error, file name is null! \n");
                
        }       
        //printf("i=%d,path=%s,len=%d\n",i,pathname,strlen(pathname));


/* second, we get the path of netscape */


        system("which netscape>/tmp/where_net_is");
        //printf("LLLpath=%s\n",pathname);
        f1=fopen("/tmp/where_net_is","rw");
        i=0;
        while(!feof(f1))
        {
                net_path[i]=fgetc(f1); 
                i++;   
        }
        //printf("MMMpath=%s\n",pathname);
   
        net_path[i-2]='\0';
        /*printf("1 char=%c, 2 char=%c\n", net_path[0],net_path[1]);*/
        if(strlen(net_path)==0 || net_path[0]=='n'&& net_path[1]=='o' )
        {
                printf("The netscape doesn't exist!\n");
                
                
        }       

  /*      net_path[i-2]=' ';
        net_path[i-1]='\0';
	*/
	// change Web browser to pdf window in case users are working offline
	strcpy(net_path,"xpdf ");

        //printf("i=%d,path=%s,len=%d\n",i,net_path,strlen(net_path));

        //printf("net=%s,file=%s\n",net_path, pathname);
       
       // strcat(net_path, htmlFile);
       strcat (net_path,guide_path);
        strcat(net_path," 2>/dev/null &");
	
    //    printf("command=%s\n",net_path); 
        system(net_path);
        
        fclose(f1);
        system("rm /tmp/where_net_is");
        free(pathname);
        free(net_path);
	free(guide_path);
	free(dragon_dir);

}

